# Copyright (C) 2005 Laurent Sansonetti
#
# Alexandria is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# Alexandria is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with Alexandria; see the file COPYING.  If not,
# write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

module Alexandria
module UI
    class MainController < OSX::NSObject
        include OSX

        include GetText
        GetText.bindtextdomain(Alexandria::TEXTDOMAIN, nil, nil, "UTF-8")

        ib_outlets :mainWindow, :booksView, :booksTableView, 
                   :librariesTableView, :toolbarSearchView, 
                   :toolbarSwitchModeView, :librariesDataSource,
                   :addBookController
        
        VIEW_AS_ICON, VIEW_AS_LIST = 0, 1
        
        def awakeFromNib
            _setupLibrariesTableView
            _setupToolbar
            _setBooksView(VIEW_AS_LIST)
        end
        
        # NSToolbar delegation
        
        TOOLITEM_NEW, TOOLITEM_ADD, TOOLITEM_SEARCH, TOOLITEM_SWITCH_MODE = \
            (0..3).to_a.map { |x| x.to_s }
        
        def _setupToolbar
            toolbar = NSToolbar.alloc.initWithIdentifier('myToolbar')
            toolbar.setDisplayMode(NSToolbarDisplayModeIconAndLabel)
            toolbar.setDelegate(self)
            @mainWindow.setToolbar(toolbar)
        end
        
        def _newLibrary(sender)
            @librariesDataSource.addLibraryWithAutogeneratedName
            @librariesTableView.reloadData
        end
        
        def _addBook(sender)
            @addBookController.openWindow(self, :_addBookDidEnd)
        end
        
        def _addBookDidEnd(library, books)
            pos = @librariesTableView.selectedRow
            libraries = @librariesTableView.dataSource.libraries
            if pos == -1 or libraries[pos] != library
                pos = libraries.index(library)
                @librariesTableView.selectRowIndexes_byExtendingSelection(NSIndexSet.indexSetWithIndex(pos),
                                                                          false)
            else
                @booksTableView.dataSource.library = library
                @booksTableView.reloadData
            end
        end
        
        def _filterBooks(sender)
            # TODO
        end
        
        def toolbar_itemForItemIdentifier_willBeInsertedIntoToolbar(toolbar, identifier, flag)
            toolitem = NSToolbarItem.alloc.initWithItemIdentifier(identifier)
            case identifier.to_s
                when TOOLITEM_NEW
                    toolitem.setLabel('New Library')
                    toolitem.setAction(:_newLibrary)
                    toolitem.setTarget(self)
                when TOOLITEM_ADD
                    toolitem.setLabel('Add Book')
                    toolitem.setAction(:_addBook)
                    toolitem.setTarget(self)
                when TOOLITEM_SEARCH
                    toolitem.setLabel('Search')
                    toolitem.setView(@toolbarSearchView)
                    height = @toolbarSearchView.frame.size.height
                    toolitem.setMinSize(NSSize.new(120, height))
                when TOOLITEM_SWITCH_MODE
                    toolitem.setLabel('View As')
                    toolitem.setView(@toolbarSwitchModeView)
                    toolitem.setMinSize(@toolbarSwitchModeView.frame.size)
            end
            return toolitem.retain
        end
        
        def toolbarDefaultItemIdentifiers(toolbar)
            [TOOLITEM_NEW, 
             TOOLITEM_ADD, 
             OSX.NSToolbarFlexibleSpaceItemIdentifier,
             TOOLITEM_SEARCH,
             OSX.NSToolbarFlexibleSpaceItemIdentifier,
             TOOLITEM_SWITCH_MODE]
        end
        
        def toolbarAllowedItemIdentifiers(toolbar)
            toolbarDefaultItemIdentifiers(toolbar)
        end
        
        # NSTableView delegation
        
        def tableViewSelectionDidChange(notification)
            if notification.object.__ocid__ == @librariesTableView.__ocid__
                pos = @librariesTableView.selectedRow
                return if pos == -1
                library = @librariesTableView.dataSource.libraries[pos]
                @booksTableView.dataSource.library = library
                @booksTableView.reloadData
            end
        end
        
        #######
        private
        #######

        def _setupLibrariesTableView
            librariesColumn = @librariesTableView.tableColumnWithIdentifier(:libraries)
            librariesColumn.setResizingMask(1) # NSTableColumnAutoresizingMask
        end

        def _setBooksView(type)
            @booksView.subviews.to_a.each { |x| x.removeFromSuperviewWithoutNeedingDisplay }
            case type
                when VIEW_AS_ICON
                    # TODO

                when VIEW_AS_LIST
                    realView = @booksTableView.superview.superview
                    realView.setFrameSize(@booksView.frame.size)
                    @booksView.addSubview(realView)
            end
            @booksView.setNeedsDisplay(TRUE)
        end
    end
end
end