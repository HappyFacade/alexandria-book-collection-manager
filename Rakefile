# -*- ruby -*-

begin
  require 'rake'
rescue LoadError
  require 'rubygems'
  require 'rake'
end

require 'rake/clean'
require 'rake/rdoctask'
require 'rake/packagetask'

$:.unshift(File.join(File.dirname(__FILE__), 'util/rake'))
require 'fileinstall'
require 'gettextgenerate'
require 'omfgenerate'


stage_dir = ENV['DESTDIR'] || 'tmp'

PROJECT='alexandria'
PREFIX='/usr'
SHARE = "#{PREFIX}/share"

DATA_VERSION = '0.6.3'
PROJECT_VERSION = '0.6.6'
DISPLAY_VERSION = '0.6.6-svn'

gettext = GettextGenerateTask.new(PROJECT) do |g|
  g.generate_po_files('po', 'po/*.po', 'data/locale')
  g.generate_desktop('alexandria.desktop.in', 'alexandria.desktop')
end


omf = OmfGenerateTask.new(PROJECT) do |o|
  o.gnome_helpfiles_dir = "#{SHARE}/gnome/help"
  o.generate_omf('data/omf/alexandria', 'data/omf/alexandria/*.in') 
end

debinstall = FileInstallTask.new(:debian_install, stage_dir, true) do |i|

  i.install_exe('bin', 'bin/*', "#{PREFIX}/bin")
  i.install('lib', 'lib/**/*.rb', i.rubylib)

  share_files = ['data/alexandria/**/*', 'data/gnome/**/*.*',
                 'data/locale/**/*.mo', 'data/omf/**/*.omf', 
                 'data/sounds/**/*.wav', 'data/menu/*']
  i.install('data', share_files, SHARE)

  icon_files = ['data/app-icon/**/*.png', 'data/app-icon/scalable/*.svg']
  i.install_icons(icon_files, "#{SHARE}/icons")

  i.install('','schemas/alexandria.schemas', "#{SHARE}/gconf")
  i.install('', 'alexandria.desktop', "#{SHARE}/applications")
  i.install('doc','doc/alexandria.1', "#{SHARE}/man/man1")


end

debinstall.similar(:install_files) do |j|
  docs = ['README', 'NEWS', 'INSTALL', 'COPYING', 'TODO']
  devel_docs = ['doc/AUTHORS', 'doc/BUGS', 'doc/FAQ', 
                'doc/cuecat_support.rdoc']
  j.install('', docs, "#{SHARE}/doc/#{PROJECT}") 
  j.install('doc', devel_docs, "#{SHARE}/doc/#{PROJECT}")

  j.uninstall_empty_dirs(["#{SHARE}/**/#{PROJECT}",
                          "#{j.rubylib}/#{PROJECT}"
                         ])
=begin
  j.uninstall_empty_dirs(["#{SHARE}/sounds/#{PROJECT}",
                          "#{SHARE}/gnome/help/#{PROJECT}",
                          "#{SHARE}/omf/#{PROJECT}",
                          "#{SHARE}/doc/#{PROJECT}",
                          "#{SHARE}/#{PROJECT}",
                          "#{j.rubylib}/#{PROJECT}"
                         ])
=end
end


task :clobberp do
  puts CLOBBER
end

## autogenerated files

def autogen_comment
  autogenerated_warning = "This file is automatically generated by the #{PROJECT} installer.\nDo not edit it directly."
  lines = autogenerated_warning.split("\n")
  result = lines.map { |line| "# #{line}"}
  result.join("\n") + "\n\n"
end

def generate(filename)
  File.open(filename, 'w') do |file|
    puts "Generating #{filename}"
    file.print autogen_comment
    file_contents = yield
    file.print file_contents.to_s
  end
end

# generate lib/alexandria/config.rb
file 'lib/alexandria/config.rb' => ['Rakefile'] do |f|
  generate(f.name) do
    <<EOS
module Alexandria
  module Config
    SHARE_DIR = '#{PREFIX}/share'
    SOUNDS_DIR = "\#{SHARE_DIR}/sounds/#{PROJECT}"
    DATA_DIR = "\#{SHARE_DIR}/#{PROJECT}"
    MAIN_DATA_DIR = DATA_DIR
  end
end
EOS
  end
end

# generate lib/alexandria/version.rb
file 'lib/alexandria/version.rb' => ['Rakefile'] do |f|
  generate(f.name) do
    <<EOS
module Alexandria
  VERSION = "#{PROJECT_VERSION}"
  DATA_VERSION = "#{DATA_VERSION}"
  DISPLAY_VERSION = "#{DISPLAY_VERSION}"
end
EOS
  end
end

# generate default_preferences.rb
def convert_with_type(value, type)
  case type
  when 'int'
    value.to_i
  when 'float'
    value.to_f
  when 'bool'
    value == 'true'
  else
    value.strip
  end
end

SCHEMA_PATH = 'schemas/alexandria.schemas'
  
# This generates default_preferences.rb by copying over values from 
# providers_priority key in alexandria.schemas (necessary?)

file 'lib/alexandria/default_preferences.rb' => [SCHEMA_PATH] do |f|
  require 'rexml/document'
  generated_lines = []

  doc = REXML::Document.new(IO.read(SCHEMA_PATH))
  doc.elements.each('gconfschemafile/schemalist/schema') do |element|
    default = element.elements['default'].text
    next unless default
    varname = File.basename(element.elements['key'].text)
    type = element.elements['type'].text

    if type == 'list' or type == 'pair'
      ary = default[1..-2].split(',')
      next if ary.empty?
      if type == 'list'
        list_type = element.elements['list_type'].text
        ary.map! { |x| convert_with_type(x, list_type) }
      elsif type == 'pair'
        next if ary.length != 2
        ary[0] = convert_with_type(ary[0],
                                   element.elements['car_type'].text)
        ary[1] = convert_with_type(ary[1],
                                   element.elements['cdr_type'].text)
      end
      default = ary.inspect
    else
      default = convert_with_type(default, type).inspect.to_s
    end

    generated_lines << varname.inspect + ' => ' + default
  end

  generate(f.name) do
    <<EOS
module Alexandria
  class Preferences
    DEFAULT_VALUES = {#{generated_lines.join(",\n      ")}}
  end
end
EOS
  end
end


autogenerated_files = ['lib/alexandria/config.rb',
                       'lib/alexandria/version.rb',
                       'lib/alexandria/default_preferences.rb']

desc "Generate ruby files needed for the installation"
task :autogen => autogenerated_files

task :autogen_clobber do |t|
  autogenerated_files.each do |file|
    FileUtils.rm_f(file)
  end
end
task :clobber => [:autogen_clobber]


## # # # default task # # # ##

task :build => [:autogen, :gettext, :omf]

task :default => [:build]

## # # # package task # # # ##

Rake::PackageTask.new(PROJECT, PROJECT_VERSION) do |p|
  p.need_tar_gz = true
  p.package_files.include("README*", "COPYING", "ChangeLog", "INSTALL",
                          "NEWS", "Rakefile", "TODO", "alexandria.desktop",
                          "alexandria.desktop.in", "tasks.rb",
                          "bin/**/*", "data/**/*", "misc/**/*",
                          "doc/**/*", "lib/**/*", "po/**/*",
                          "schemas/**/*", "spec/**/*", "tests/**/*")
end

task :tgz => [:build, :package] do 
  puts "Sigh... probably no .mo files in the tgz; run again!"
end

## # # # system installation # # # ##

task :pre_install => [:build]
task :scrollkeeper do
  unless system("which scrollkeeper-update")
    raise "scrollkeeper-update cannot be found, is Scrollkeeper correctly installed?"
  end
  system('scrollkeeper-update -q') or raise 'Scrollkeeper update failed'
end

task :gconf do
  return if ENV['GCONF_DISABLE_MAKEFILE_SCHEMA_INSTALL']

  unless system("which gconftool-2")
    raise "gconftool-2 cannot be found, is GConf2 correctly installed?"
  end

  ENV['GCONF_CONFIG_SOURCE'] = `gconftool-2 --get-default-source`.chomp
  Dir["schemas/*.schemas"].each do |schema|
    system("gconftool-2 --makefile-install-rule '#{schema}'")
  end
end

task :update_icon_cache do
  system("gtk-update-icon-cache -f -t /usr/share/icons/hicolor") # HACK
end

task :post_install => [:scrollkeeper, :gconf, :update_icon_cache]

desc "Install Alexandria"
task :install => [:pre_install, :install_files, :post_install]

desc "Uninstall Alexandria"
task :uninstall => [:un_install_files, :un_install_files_empty_dirs]
